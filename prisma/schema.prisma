generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model images {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  file_id    String
  url        String[]
  userId     String?   @unique @db.ObjectId
  users      users?    @relation(fields: [userId], references: [id])
  shopId     String?   @unique @db.ObjectId
  shops      shops?    @relation(fields: [shopId], references: [id])
  products   products? @relation(fields: [productsId], references: [id])
  productsId String?   @db.ObjectId
}

enum userRole {
  user
  admin
  seller
}

model users {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String        @unique
  password    String?
  following   String[]
  avatar      images?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  shopReviews shopReviews[]
  imagesId    String?       @db.ObjectId
  followings  follower[]
  orders      orders[]
  role        userRole    @default(user)
  messagesSent     Message[] @relation("MessagesFromUser")
  messagesReceived Message[] @relation("MessagesToUser")
  // followers  Follower[]
}

model shopReviews {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      users    @relation(fields: [userId], references: [id])
  rating    Float
  reviews   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  shopsId   String?  @db.ObjectId
  shops     shops?   @relation(fields: [shopsId], references: [id])
}

model follower {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId  String @db.ObjectId
  shopsId String @db.ObjectId

  shops shops? @relation(fields: [shopsId], references: [id])
  user  users  @relation(fields: [userId], references: [id])

  @@unique([userId, shopsId])
}

model shops {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  bio           String?
  category      String
  avatar        images?
  coverBanner   String?
  address       String
  opening_hours String?
  website       String?
  socialLinks   Json[]
  rating        Float         @default(0)
  reviews       shopReviews[]
  sellerId      String        @unique @db.ObjectId
  sellers       sellers       @relation(fields: [sellerId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  products      products[]
  isDeleted     Boolean       @default(false)
  deletedAt     DateTime?
  imagesId      String?
  followers     follower[]
  orders        orders[]
}

model sellers {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String    @unique
  phone_number String
  country      String
  password     String
  stripeId     String?
  Shop         shops?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  isDeleted    Boolean   @default(false)
  deletedAt    DateTime?
  shopId       String?   @db.ObjectId
  role          userRole @default(seller)
}

model site_config {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  categories    String[]
  subCategories Json
  logo          String?
  banner        String?
}

model discount_codes {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  public_name   String
  discountType  String
  discountValue Float
  discountCode  String   @unique
  sellerId      String   @db.ObjectId
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum productStatus {
  Active
  Pending
  Draft
}

model products {
  id                    String        @id @default(auto()) @map("_id") @db.ObjectId
  title                 String
  slug                  String        @unique
  category              String
  subCategory           String
  short_description     String
  detailed_description  String
  images                images[]
  video_url             String?
  tags                  String[]
  brand                 String?
  colors                String[]
  sizes                 String[]
  starting_date         DateTime?
  ending_date           DateTime?
  stock                 Int
  sale_price            Float
  regular_price         Float
  totalSales            Int           @default(0)
  ratings               Float         @default(5)
  warranty              String?
  custom_specifications Json?
  custom_properties     Json
  isDeleted             Boolean?      @default(false)
  cashOnDelivery        String?
  discount_codes        String[]      @db.ObjectId
  status                productStatus @default(Active)
  deletedAt             DateTime?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  shopId                String        @db.ObjectId
  Shop                  shops         @relation(fields: [shopId], references: [id])
}

model orders {
  id                String       @id @default(auto()) @map("_id") @db.ObjectId
  userId            String       @db.ObjectId
  user              users        @relation(fields: [userId], references: [id])
  shopId            String       @db.ObjectId
  shop              shops        @relation(fields: [shopId], references: [id])
  total             Float
  shippingAddressId String?
  couponCode        String?
  discountAmount    Float?
  status            String
  deliveryStatus    String       @default("Ordered")
  items             orderItems[] @relation("OrderItemsRelation")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model orderItems {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  orderId         String @db.ObjectId
  productId       String
  quantity        Int
  price           Float
  selectedOptions Json?

  orders    orders   @relation(fields: [orderId], references: [id], name: "OrderItemsRelation")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum addressType {
  Home
  Work
  Other
}

model address {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  userId    String      @db.ObjectId
  label     addressType
  name      String
  street    String
  city      String
  zip       String
  country   String
  isDefault Boolean     @default(true)
  createdAt DateTime    @default(now())
}


model Message {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  fromUserId   String      @db.ObjectId
  toUserId     String      @db.ObjectId
  fromUser     users        @relation("MessagesFromUser", fields: [fromUserId], references: [id])
  toUser       users        @relation("MessagesToUser", fields: [toUserId], references: [id])
  content      String
  attachments  Attachment[] 
  readStatus   Boolean     @default(false)
  readAt       DateTime?
  messageType  MessageType @default(text)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@index([fromUserId, toUserId, createdAt(sort: Desc)])
  @@index([toUserId, readStatus])
}

enum MessageType {
  text
  image
  document
}

type Attachment {
  type     String
  url      String
  filename String
  size     Float
}

