generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model images {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  file_id String
  url     String[]

  // User avatar (one-to-one)
  userAvatarOf users[] @relation("UserAvatar")

  // User gallery (one-to-many)
  user   users?  @relation("UserImages", fields: [userId], references: [id])
  userId String? @db.ObjectId

  // Shop avatar (one-to-one)
  shopAvatarOf shops[] @relation("ShopAvatar")

  // Shop gallery (one-to-many)
  shop   shops?  @relation("ShopImages", fields: [shopId], references: [id])
  shopId String? @db.ObjectId

  // Product images (one-to-many)
  products   products? @relation(fields: [productsId], references: [id])
  productsId String?   @db.ObjectId
}

enum userRole {
  user
  admin
  seller
}

model users {
  id               String        @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  email            String        @unique
  password         String?
  following        String[]
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  shopReviews      shopReviews[]
  followings       follower[]
  orders           orders[]
  role             userRole      @default(user)
  // messagesSent     Message[]     @relation("MessagesFromUser")
  // messagesReceived Message[]     @relation("MessagesToUser")

  // One-to-one avatar
  avatar images? @relation("UserAvatar", fields: [avatarId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  avatarId String?  @db.ObjectId

  // One-to-many gallery
  images images[] @relation("UserImages")


}

model shopReviews {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      users    @relation(fields: [userId], references: [id])
  rating    Float
  reviews   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  shopsId   String?  @db.ObjectId
  shops     shops?   @relation(fields: [shopsId], references: [id])
}

model follower {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId  String @db.ObjectId
  shopsId String @db.ObjectId

  shops shops? @relation(fields: [shopsId], references: [id])
  user  users  @relation(fields: [userId], references: [id])

  @@unique([userId, shopsId])
}

model shops {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  bio           String?
  category      String
  coverBanner   String?
  address       String
  opening_hours String?
  website       String?
  socialLinks   Json[]
  rating        Float         @default(0)
  reviews       shopReviews[]
  sellerId      String        @unique @db.ObjectId
  sellers       sellers       @relation(fields: [sellerId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  products      products[]
  isDeleted     Boolean       @default(false)
  deletedAt     DateTime?
  followers     follower[]
  orders        orders[]

  // One-to-one avatar
  avatar images? @relation("ShopAvatar", fields: [avatarId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  avatarId String?  @db.ObjectId

  // One-to-many gallery
  images images[] @relation("ShopImages")
}

model sellers {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String    @unique
  phone_number String
  country      String
  password     String
  stripeId     String?
  Shop         shops?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  isDeleted    Boolean   @default(false)
  deletedAt    DateTime?
  shopId       String?   @db.ObjectId
  role         userRole  @default(seller)
}

model site_config {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  categories    String[]
  subCategories Json
  logo          String?
  banner        String?
}

model discount_codes {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  public_name   String
  discountType  String
  discountValue Float
  discountCode  String   @unique
  sellerId      String   @db.ObjectId
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum productStatus {
  Active
  Pending
  Draft
}

model products {
  id                    String        @id @default(auto()) @map("_id") @db.ObjectId
  title                 String
  slug                  String        @unique
  category              String
  subCategory           String
  short_description     String
  detailed_description  String
  images                images[]
  video_url             String?
  tags                  String[]
  brand                 String?
  colors                String[]
  sizes                 String[]
  starting_date         DateTime?
  ending_date           DateTime?
  stock                 Int
  sale_price            Float
  regular_price         Float
  totalSales            Int           @default(0)
  ratings               Float         @default(5)
  warranty              String?
  custom_specifications Json?
  custom_properties     Json
  isDeleted             Boolean?      @default(false)
  cashOnDelivery        String?
  discount_codes        String[]      @db.ObjectId
  status                productStatus @default(Active)
  deletedAt             DateTime?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  shopId                String        @db.ObjectId
  Shop                  shops         @relation(fields: [shopId], references: [id])
}

model orders {
  id                String       @id @default(auto()) @map("_id") @db.ObjectId
  userId            String       @db.ObjectId
  user              users        @relation(fields: [userId], references: [id])
  shopId            String       @db.ObjectId
  shop              shops        @relation(fields: [shopId], references: [id])
  total             Float
  shippingAddressId String?
  couponCode        String?
  discountAmount    Float?
  status            String
  deliveryStatus    String       @default("Ordered")
  items             orderItems[] @relation("OrderItemsRelation")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model orderItems {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  orderId         String @db.ObjectId
  productId       String
  quantity        Int
  price           Float
  selectedOptions Json?

  orders    orders   @relation(fields: [orderId], references: [id], name: "OrderItemsRelation")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum addressType {
  Home
  Work
  Other
}

model address {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  userId    String      @db.ObjectId
  label     addressType
  name      String
  street    String
  city      String
  zip       String
  country   String
  isDefault Boolean     @default(true)
  createdAt DateTime    @default(now())
}

// model Message {
//   id          String       @id @default(auto()) @map("_id") @db.ObjectId
//   fromUserId  String       @db.ObjectId
//   toUserId    String       @db.ObjectId
//   fromUser    users        @relation("MessagesFromUser", fields: [fromUserId], references: [id])
//   toUser      users        @relation("MessagesToUser", fields: [toUserId], references: [id])
//   content     String
//   attachments Attachment[]
//   readStatus  Boolean      @default(false)
//   readAt      DateTime?
//   messageType MessageType  @default(text)
//   createdAt   DateTime     @default(now())
//   updatedAt   DateTime     @updatedAt

//   @@index([fromUserId, toUserId, createdAt(sort: Desc)])
//   @@index([toUserId, readStatus])
// }

enum MessageType {
  text
  image
  document
}

type Attachment {
  type     String
  url      String
  filename String
  size     Float
}

model notifications {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  creatorId String @db.ObjectId
  receiverId String
  redirect_link String?
  title String
  message String
  status String @default("Unread")

createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
}

model shopAnalytics {
   id String @id @default(auto()) @map("_id") @db.ObjectId
   totalVisitors Int @default(0)

   countryStats Json?
   cityStats Json?
   deviceStats Json?

   lastVisitedAt DateTime

   createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model productAnalytics {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  productId String @unique
  shopId String
  views Int @default(0)
  cartAdds Int @default(0)
  wishListAdds Int @default(0)
  purchases Int @default(0)
  lastViewedAt DateTime
createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

}

model userAnalytics{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique
  country String?
  city String?
  device String?
  lastVisited DateTime
  actions Json?
  recommendations Json?
  lasttrianed DateTime @default(now())

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model conversationGroup{
  id String  @id @default(auto()) @map("_id") @db.ObjectId
  isGroup Boolean @default(false)
  name String?
  creatorId String @db.ObjectId
  participantsIds String[] @db.ObjectId
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model participant{
  id String  @id @default(auto()) @map("_id") @db.ObjectId
  conversationId String @db.ObjectId
  userId String? @db.ObjectId
  sellerId String? @db.ObjectId
  lastSeenAt DateTime?
  isOnline Boolean @default(false)
  unreadCount Int @default(0)
  muted Boolean @default(false)
  joinedAt DateTime @default(now())

  @@index([conversationId, userId])  // ✅ Added index for participant queries
  @@index([conversationId, sellerId])  // ✅ Added index for participant queries
}

model message {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  conversationId String @db.ObjectId
  senderId String @db.ObjectId
  senderType String
  content String?
  attachments String[]
  status String @default("sent")
  createdAt DateTime @default(now())

  @@unique([conversationId,senderId,content,createdAt])
  @@index([conversationId, createdAt(sort: Desc)])  // ✅ Added index for message queries
}